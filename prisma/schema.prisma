generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  phone      String      @unique
  accessCode AccessCode?
  recipes    Recipe[]
  tags       Tag[]
  groups     UserGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGroup {
  groupId        Int
  group          Group   @relation(fields: [groupId], references: [id])
  userId         Int
  user           User    @relation(fields: [userId], references: [id])
  autoAddRecipes Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  invitations GroupInvite[]
  users       UserGroup[]
  recipes     Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupInvite {
  id      Int    @id @default(autoincrement())
  phone   String
  groupId Int
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([phone, groupId])
}

model AccessCode {
  code     Int  @id
  attempts Int  @default(0)
  userId   Int  @unique
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Recipe {
  id     Int     @id @default(autoincrement())
  name   String
  html   String
  userId Int
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags   Tag[]   @relation("RecipeToTag")
  groups Group[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([id, userId])
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes Recipe[] @relation("RecipeToTag")

  @@unique([id, userId])
}
